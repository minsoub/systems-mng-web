version: 0.2

env:
  variables:
    NODE_PROFILE: "dev"
    REPO_URI: "807380035085.dkr.ecr.ap-northeast-2.amazonaws.com/systems-mng-web-dev-repo"
    CONTAINER_NAME: "systems-mng-web-dev-container"
    SERVICE_ROLE: "arn:aws:iam::807380035085:role/service-role/codebuild-systems-mng-web-codebuild-dev-service-role"
phases:
  install:
    runtime-versions:
      docker: 18
    command:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${REPO_URI}
      - REPOSITORY_URI=${REPO_URI}
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - ASSUME_ROLE_ARN=${SERVICE_ROLE}
      - TEMP_ROLE=$(aws sts assume-role --role-arn ${ASSUME_ROLE_ARN} --role-session-name test)
      - export TEMP_ROLE
      - export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SessionToken')
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image ...
      - docker build -f deploy/Dockerfile -t $REPOSITORY_URI:latest --build-arg PROFILES=${NODE_PROFILE} .
      - echo Build completed on `date`
  post_build:
    commands:
      - echo $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      - echo docker tag completed on `date`
      - echo Pushing the Docker images ...
      - ls -al
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"%s", "imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:latest > imageDefinitions.json
      - ls -al
cache:
  paths:
    - '/root/.gradle/**/*'
artifacts:
  files: imageDefinitions.json